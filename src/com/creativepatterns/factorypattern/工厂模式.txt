工厂模式
    提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，
并且是通过使用一个共同的接口来指向新创建的对象。

意图：将多个类似的不同产品集中在一个接口中，再由工厂类创建具体产品
主要解决：主要解决接口选择的问题。
何时使用：我们明确地计划不同条件下创建不同实例时。
如何解决：让其子类实现工厂接口，返回的也是一个抽象的产品。
关键代码：创建过程在其子类执行。

角色：
    具体工厂类：通过具体产品相对应的标签创建具体产品，创建产品
    抽象产品接口：产品的共性，同名操作，抽象化产品
    具体产品：实习抽象产品接口的多个不同的产品，产品的特性

特点：
    提高创建对象的灵活性，所有创建对象的底层操作都是：new AClass(args...)
    代码在程序设计中往往难于修改，即 new AClass(args...) 不能改为 new BClass(args...)
    工厂模式的原理就是：包装对象的底层创建，通过可以轻易修改的数据（而不是固定的代码）来创建相对应的对象

设计注意：
    1.具体工厂类可以使用泛型技术
    2.与产品对应的标签只存在于具体工厂类的创建具体产品的方法中，即标签的解释权在于此方法，实际上的产品并无所谓的标签
    3.增加一个产品需要增加一个实现抽象产品的具体产品，并且还要扩展具体工厂类。